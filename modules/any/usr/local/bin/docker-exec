#!/bin/bash
#https://github.com/encodeering

function log {
    [ ! -z "${debug:+x}" ] && { echo "$@"; } || { true; }
}

function setup {
    handler="$1"; shift
    process="$1"; shift

    for signal; do
        log  "trapping process ${process} -${signal}"
        trap "${handler}      '${process}''${signal}'" "${signal}"
    done
}

function alive {
    kill -0 "$1" 2> /dev/null
}

function stop {
    log  "stopping process $1 ${2:+-$2}"
    kill                     "${2:+-$2}" "$1" 2> /dev/null
}

function terminate {
    pid="$1"; shift
    sec="$1"; shift

    if [ "${sec}" -le 0 ]; then
        stop  "${pid}"
        alive "${pid}" && { false; } || { true; }
    else
        alive "${pid}" && { log "terminating process ${pid} forcefully after ${sec} seconds"; sleep 1; terminate "${pid}" "$(expr ${sec} - 1)"; } || { true; }
    fi
}

which "$1" > /dev/null && { log "starting process using exec"; exec    "$@" ; } \
                       || { log "starting process using bash"; bash -c "$@" & }

                pid="$!"
setup "stop" "${pid}" SIGHUP SIGINT SIGQUIT SIGTERM SIGUSR1 SIGUSR2
wait         "${pid}" # interrupt signal will trigger the parent and child process

status=${?}

terminate    "${pid}" 5 # whereby the parent process should terminate the misbehaving child process eventually

[ ${status} = 0 ] && { exit ${?};      } \
                  || { exit ${status}; }
